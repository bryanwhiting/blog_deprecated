<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Plotly on My take on data</title>
    <link>/tags/plotly/</link>
    <description>Recent content in Plotly on My take on data</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/plotly/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sample Size</title>
      <link>/2019/10/sample-size/</link>
      <pubDate>Mon, 28 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/sample-size/</guid>
      <description>So your boss likes asking questions. Let’s find answers to a few she might ask.
# Go and collect some car data df = read.table(&amp;#39;ftp://ftp.ics.uci.edu/pub/machine-learning-databases/auto-mpg/auto-mpg.data-original&amp;#39;, col.names = c(&amp;#39;mpg&amp;#39;, &amp;#39;cyl&amp;#39;, &amp;#39;disp&amp;#39;, &amp;#39;hp&amp;#39;, &amp;#39;wt&amp;#39;, &amp;#39;acc&amp;#39;, &amp;#39;year&amp;#39;, &amp;#39;origin&amp;#39;, &amp;#39;name&amp;#39;)) # Let&amp;#39;s randomly shuffle the rows set.seed(1) df &amp;lt;- df[sample(nrow(df)),] # Extract make df$make &amp;lt;- word(df$name) df %&amp;lt;&amp;gt;% filter(!is.na(mpg)) %&amp;gt;% select(name, make, everything()) One Sample T-Test  Question 1: I think Ford cars have pretty bad miles-per-gallon (MPG).</description>
    </item>
    
    <item>
      <title>Why does everyone I work with have the same name? A guide on how to not pick a unique baby name in America.</title>
      <link>/2019/10/baby-names/</link>
      <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/10/baby-names/</guid>
      <description>I’ve taken a particular interest in names since I’m thinking of a name for my to-be-born son. I did a little digging through the Social Security Administration names database, which lists all names given to baby boys and girls in America1. I began this exercise to just get a quality list of ideas, but my curiosity got the better of me.
Name Trends Since 1950 What was the most popular boy name since 1950?</description>
    </item>
    
    <item>
      <title>Scraping Baby Boy Name Trends</title>
      <link>/2019/09/baby-boy-names/</link>
      <pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/2019/09/baby-boy-names/</guid>
      <description>I’m going to be a dad (again) soon. I don’t want my boy to have a common name, so I gotta do my research. I’m curious: how do names trend over time? If I pick a name today, will it be popular tomorrow?
Step 1: The Social Security Administration reports all baby names each year in the United States, given the name occurs at least 5 times.</description>
    </item>
    
    <item>
      <title>The DataViz battle: Plotly vs ggplot2</title>
      <link>/2017/02/the-dataviz-battle-plotly-vs-ggplot2/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/02/the-dataviz-battle-plotly-vs-ggplot2/</guid>
      <description>R users fall in love with ggplot2, the growing standard for data visualization in R. The ability to quickly vizualize trends, and customize just about anything you’d want, make it a powerful tool. Yet this week, I made a discovery that may reduce how much I used ggplot2. Enter plot_ly().
For this post, I assume that you have a working knowledge of the dplyr (or magrittr) and ggplot2 packages.</description>
    </item>
    
  </channel>
</rss>